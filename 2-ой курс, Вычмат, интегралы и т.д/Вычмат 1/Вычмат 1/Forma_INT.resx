<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQED/AAAAAAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAABIAABMLAAATCwAAAAAAAAAA
        AAAAAAAABQWkALK1rQCYnJcAbXKRADw9dQDY4N4Az9DDACkqbAC9wbYAam23ADw+xACbnK0AJCXDADs8
        swDGybwAFhyKAJKXkgCbobMAi5CzALW4rwA7PKoAIyS0AFlbxADV2M0AEhPDAMDDtwDJy74AtLq9AKWp
        pACssbMAZG6CAIGMjwAkJawAg4bBAL3E0gAKC6EA0tLFAD1C9gCztrEAIybsADs8mwDHyOUAISSiAMfO
        2ADEzNMAYWO8ALvDzACMi/IAfYWQAH2AtQBSU8sAqq6qAJ6e3gCdo6IAsrS8AMfG8AAgIp4AAQG7AI2N
        3wDKz9gAExO0AM/Y2ABeZ/oAd36VAMnO1ACbn7wAwsTFAA4N0wBaXLcAKyzEAA0NuwDN1NkAYmelAEpM
        xACvrukAjY7SAMvNywDQ0OkAWWp0ALKx8wCWm5oAFhfhAHR3uQDR1toANDSzAFJTqwBbZO4Av8nPAKyz
        ygC7vcIAWVyDAFtdjQASE9sAoaWfAImKygC+wrgAUVK4AHx92gBqeH4AKjCUAGNlwwBUYHYAcW/qAK2x
        rAC6vbQAx9DUAENEwwCIi6wAtrzQABQUrQBzdNcAg4XVAEhcaACkqroAoqaiACwtzQDS1cwAe33SAERF
        twC0u80ARESoAKWrqgA/RO8ALC6IAKmtpwBQVNoASFGYAKusvQAcHMIAGxu0AJSaowAyM6sA09nUAHt8
        qgCjpbQAIiPKACsstABESu8AgYSsAAIBswCdop0APEHmANri4AB9fsoAWVzbAIqQpQDMzsEAk5m8AExN
        gAACAsMAZGXLAG5z0QAREaMAKCvYADo+2QALC7MANjieALK1wwAyNu4AZWabAGpsqQBsbssAc3WlAMLG
        ygCEhswAMjOiALq+0QCSlLMAo6rFAAoLwgBzdMsArLO8ANHW0wAsLHoAS0zMAEZIigCVmZQAEhTLALa5
        sgCAhaUAw8W6ALzCxQB+f8UAbW2hANjZzQBLS7cAub3JAKSrtACKkpsAY2aTAOrq+ABkZtYAFBWeAEtN
        pwC1vMMARk3yALG1zQAeIdgAQ0Z0AJSYqwBbXMwAJCS6ADw+0gDO0cwAKSutAJ+kqwCdo8QAHBytADQ1
        uwAsLu4AbW/DAIaMtgA2Ot4AlZrDABITvQCNkrwAmZ6aADQ1wwBxc8QATlPmAExN0wAaG90ASEicABob
        vAADA6wACwytACwtpAAbHMsAzNPVAMXKywCMkq0AUFPVAFNUkACnr8gAFhfRANPa2gAZGqQAwcbSAEJE
        zQB4eqYAMzRqAAYGywAyNMoAgIScACgqmgB2ep4AQkN9ACwtuwAMDMwArbPDAGRj5QCTltIAlZyyADo6
        ugAiJdYAdXUYGBgYGBgYGBiFhYWFhYWFhYWF7Ozs7Ozs7Ozs7OzsVEhIVFRUSEhI7Ozl7Ozs7Ozs7Ozs
        7Ozs7OwGBgaPj3V1dXUYGBgYGBgYdRiFrYWFhYWFhYXs7OzsVOxUVFRUSEhISEhISEhISEhI5eWt7Ozs
        7Ozs7Ozs7Ozs7OwGBgZ1dXV1dXV1dXV1dXWtra2tra2tra1UVFRUVFRUSEhISEhISEhISEjl5eXl5eXl
        SEhISOzs7Ozs7Ozs7Ozs7OwGdXV1dXV1dXV1dXV1da2tra2tra3lSFRISEhISEhISDw8LCwtLS0tLS0t
        LeXl5eXl5eXl5Ujs7Ozs7Ozs7Ozs7HV1dXV1dXV1dczMzOXl5eXl5eXlQTxIQUFBLS0tLS0t7iMjIyMj
        7i0tLS0tLS0tLWrl5eXl5eXlhT7s7Ozs7Ox1zMzMzMzMzMzMzMzl5UFBQS0tLe4t7iMjIyOnp21tbXh4
        eHh4eHh4bW0jIyMjIy0tLS0tauXl5eXl5YU+7OzszMzMzMzMzE1NTU1NTU3m5qSkL7u7u56e+oCAqanP
        z8/Pz8/PqampWVlZWXh4eC8jLy8tLS0tLWrl5eXl5T7s7MzMzE1NTU1NTU1NTebmpKQvu8OegIByQqio
        bIuGo6OjhoaL1NiUlM/PqalZWVl4eHgvLy9Y5i0tauXl5eWF7OzMzMxNTU1NTU1N5uakpC9aWp6egHJC
        qBOL8Li+6ZX3BceVXKDwi9TY1s/PqepZWXh4eC8vL1gtLS1q5eXlSOzszMzMTU1NTU1NTeakpEO2Wp43
        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
        NDQdHTR9fX19HR0dHR1zc3Nec3NeXhsbDw+1tbW1YAkJaWlpabOzFCcnJycnAgJoNGhoaDRPNH19NDQ0
        NDQ0NDR9cx19fX19fR0dHR0dc3Nzc3NzXl4bDw+1tbW1YAkJCWlpabOzs7Ozs7MnJycCaDRoaGhoY1E0
        NGg0NDR9fX19fY0dfX0dHR0dHR0dc3NzXl5eXl5eDw+1tbW1tWAJCQlpaWlpaWlps7OzJycCaDR6aGg0
        NB1maGhoaGhoNH19fR2NHR0dHR0dHR0dc3Nzc15eXl5eXrW1tbW1tbW1YGAJCWlpaWlpabOzsycCaGg0
        HWg0aGhoYyBoAgICaGg0fR2NjR0dHR0dHR1zc3NeXl5eXo2NjY21tbW1tbW1tbVgYGBpaWmzs7OzJycn
        aGhoNHNoaGhoaDRxegICAmhoNDQdUXMdc3Nzc3Nzc15eXl6NjY2NjY2NGgkJCQlgYGBgYGBgaWlps7Oz
        JycnJx4eaGg2aGhoaGhovXFoaGhoNDQdUTYdHXNzc15eXl5ejY2NjY3Z2dnZ2QkJaWlpaWlpaWlpaWlp
        aWmzs7MnJyceHh5oNmhoaDQ0NGhjT2hoNDQ0HTYdHR0dczaNjY2NjY2NjdnZ2dkDAwNpaWlpaWmzs7Oz
        s7Ozs7Ozs7MnJyceaGhoNB00NDQ0NDRoNCA0NDQ0NHodHR0dHR1zc42NjY2N2dnZ2QMDsbGxaWlps7Oz
        s7Ozs7MnJycnJycCJx4eaGhoaDQ0NDQ0NDRoaDQ0NHp6HR0dHR1zc3Nzc3ONjY2N2dnZA7GxsbGxsbOz
        sxQUFLMnJycnJwICaGhoaGg0NGhoaGhoNDR6enp6ejQ0NHp6HR0dc3Nzc3Nzc3NzczaNjdkDsbGxsbGx
        sbEUFAICAgICJycnJwICAmhoaDQ0NDR6NDQ0NDR6enp6enp6enp6HR0dc3M2NjY2NjY2NjY2jY2NA7Gx
        sbGxsbGxAgICAgICAgICAgICaGhoaGg0NDR6enp6eno0enp6enp6HR16HR0dc3NzNjY2NjY2NjY2jY2N
        jdmxsbGxsbGxsQICAgICAgICAgJoaGhoaGg0NDQ0enp6HR16enp6enodHXM2NjY2NjY2No2N2dmNjY3Z
        2dnZ2dmxsbEREbERsbECAgICAgICAmhoaGhoaGhoNDQ0NHp6eh0dHR0dc3NzNjY2NjY2jdnZ2dnZ2VFR
        UVFRUVFRsbGxsbERERERERGxAgICAgICaAJoaGhoaGhoNDQ0NDR6enp6HR1zc3NzNjY2NjaN2dlRUVFR
        UVFRUVFRUVGxsRERERERERERERERsQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>